/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bc_dna;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
import org.apache.commons.math3.stat.descriptive.moment.Mean;
import org.apache.commons.math3.stat.descriptive.rank.Min;
import org.apache.commons.math3.stat.descriptive.rank.Max;
import org.apache.commons.math3.stat.descriptive.rank.Median;
import tester.db.Run;

/**
 *
 * @author RÃ³bert Cuprik <robertcuprik at hotmail.com>
 */
public class MainForm extends javax.swing.JFrame {

    private int configsLoaded = 0;
    private int seqsLoaded = 0;
    BC_DNA main;
    private Boolean isWorking = false;
    private DefaultCaret caret;
    private long elapsed;
    
    /**
     * Creates new form MainForm
     */
    public MainForm() {
        
        initComponents();
        jTextAreaOutput.setEditable(false);
        try {
            main = new BC_DNA(this);
        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        caret = (DefaultCaret)jTextAreaOutput.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        this.setTitle("Hladanie motivov v DNA sekvenciach 2015 FIIT");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jButtonStart = new javax.swing.JButton();
        jCheckBoxDeepAnalysis = new javax.swing.JCheckBox();
        jCheckBoxSimilaritySorter = new javax.swing.JCheckBox();
        jCheckBoxSingleDistance = new javax.swing.JCheckBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaOutput = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jStartedTime = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelElapsed = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        runList = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jCheckBoxTotals = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableResults = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        OpenFile = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Choose input sequences");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonStart.setText("Start");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        jCheckBoxDeepAnalysis.setText("Enable deep analysis");

        jCheckBoxSimilaritySorter.setText("Use similarity priority sorter");

        jCheckBoxSingleDistance.setText("singe CD");

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jTextAreaOutput.setColumns(20);
        jTextAreaOutput.setRows(5);
        jScrollPane1.setViewportView(jTextAreaOutput);

        jLabel1.setText("Started");

        jLabel2.setText("Elapsed");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1351, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jStartedTime))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelElapsed)))
                .addGap(85, 85, 85))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jStartedTime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabelElapsed))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("console", jPanel2);

        runList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runListActionPerformed(evt);
            }
        });

        jButton1.setText("refreshRuns");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBoxTotals.setSelected(true);
        jCheckBoxTotals.setText("Totals");

        jButton2.setText("results");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTableResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTableResults);

        jScrollPane3.setViewportView(jScrollPane2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(runList, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxTotals)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1011, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(32, 32, 32))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(runList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBoxTotals)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 665, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("results", jPanel1);

        jMenu1.setText("File");

        OpenFile.setText("Open sequences");
        OpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFileActionPerformed(evt);
            }
        });
        jMenu1.add(OpenFile);

        jMenuItem2.setText("Load cfgs from db");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem1.setText("Open configs");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBoxSingleDistance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxSimilaritySorter)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxDeepAnalysis)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonStart)
                .addGap(42, 42, 42))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 746, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonStart)
                    .addComponent(jCheckBoxDeepAnalysis)
                    .addComponent(jCheckBoxSimilaritySorter)
                    .addComponent(jCheckBoxSingleDistance))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFileActionPerformed
        
        if(isWorking)
            return;
        
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setMultiSelectionEnabled(true);
        FileFilter filter = new FileNameExtensionFilter("fasta sequence","fasta");
        fileChooser.setFileFilter(filter);        
        fileChooser.setDialogTitle("Please select DNA sequence files");
        fileChooser.setCurrentDirectory(new File("."));
        
        fileChooser.setFileSelectionMode(fileChooser.FILES_AND_DIRECTORIES);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File files[] = fileChooser.getSelectedFiles();
              // What to do with the file, e.g. display it in a TextArea
             // textarea.read( new FileReader( file.getAbsolutePath() ), null );
                seqsLoaded = main.loadSequencesFromFiles(files,true);
                jTextAreaOutput.append(
                        String.format("Loaded %d sequence files\n", seqsLoaded)
                );
      
        } else {
            jTextAreaOutput.append("Sequences: File access cancelled by user.\n");
        }
        jTextAreaOutput.setCaretPosition(jTextAreaOutput.getDocument().getLength());
     
    }//GEN-LAST:event_OpenFileActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0); 
    }//GEN-LAST:event_ExitActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        if(isWorking)
            return;
        
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setMultiSelectionEnabled(true);
        FileFilter filter = new FileNameExtensionFilter("json configs","json");
        fileChooser.setFileFilter(filter);
        fileChooser.setDialogTitle("Please select configuration files");
        fileChooser.setCurrentDirectory(new File("."));
        
        fileChooser.setFileSelectionMode(fileChooser.FILES_AND_DIRECTORIES);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File files[] = fileChooser.getSelectedFiles();
              // What to do with the file, e.g. display it in a TextArea
             // textarea.read( new FileReader( file.getAbsolutePath() ), null );
            configsLoaded = main.loadConfigurationsFromFiles(files,true);
            jTextAreaOutput.append(
                    String.format("Loaded %d configurations\n", configsLoaded)
            );
      
        } else {
            jTextAreaOutput.append("Configs: File access cancelled by user.\n");
        }
        jTextAreaOutput.setCaretPosition(jTextAreaOutput.getDocument().getLength());
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        
        if(configsLoaded!= 0 && seqsLoaded!= 0){
            
            isWorking = true;
            jTextAreaOutput.append("Start\n");
            jButtonStart.setEnabled(false);
            
            Thread queryThread = new Thread() {
                public void run() {
                    main.run(
                       jCheckBoxDeepAnalysis.isSelected(), 
                       jCheckBoxSimilaritySorter.isSelected(),
                       jCheckBoxSingleDistance.isSelected() 
                    );
                }
            };
            queryThread.start();  
        
            DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
            Date date = new Date();            
            jStartedTime.setText(dateFormat.format(date));
            elapsed = date.getTime();
        
        } else {
        
            jTextAreaOutput.append("Files not loaded\n");
        
        }
        jTextAreaOutput.setCaretPosition(jTextAreaOutput.getDocument().getLength());
        
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        
        
        configsLoaded = main.loadConfigurationsFromDB();
            jTextAreaOutput.append(
                    String.format("Loaded %d configurations\n", configsLoaded)
            );
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void runListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_runListActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                
        runList.removeAllItems();
        for(Object o:main.getPgDao().getRunListSwing()){
        
            runList.addItem(o);
        
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        Run r = (Run) runList.getSelectedItem();
        if(jCheckBoxTotals.isSelected() && r != null) {
        
            DefaultTableModel m = (DefaultTableModel) jTableResults.getModel();
            m.setColumnCount(0);
            m.setRowCount(0);   
            List<List<String>> res = main.getPgDao().getResultsByRun(r, jCheckBoxTotals.isSelected());
            
            List<String> row = res.get(0);
            
       
            
            
            for(String s:row){
            
                m.addColumn(s);
            
            }
            
            for( int i = 1; i<res.size(); i++ ){
            
                m.addRow(res.get(i).toArray());
            
            }
            
            Object[] average = new Object[row.size()];            
            Object[] stdDev = new Object[row.size()];
            Object[] min = new Object[row.size()];
            Object[] max = new Object[row.size()];
            Object[] median = new Object[row.size()];
            
            int rowCount = m.getRowCount();
            
            for(int i = 0; i < average.length; i++){
            
                average[i] = "<html><b>#</b></html>";
                stdDev[i] = "<html><b>#</b></html>";
                min[i] = "<html><b>#</b></html>";
                max[i] = "<html><b>#</b></html>";
                median[i] = "<html><b>#</b></html>";
            
            }
            
            average[2] = "<html><b>Average</b></html>";
            stdDev[2] ="<html><b>Std_dev</b></html>";
            min[2] ="<html><b>Minimum</b></html>";
            max[2] ="<html><b>Maximum</b></html>";
            median[2] ="<html><b>Median</b></html>";
            
            StandardDeviation std = new StandardDeviation();
            Mean mean = new Mean();
            Min minD = new Min();
            Max maxD = new Max();
            Median medD = new Median();
            
            for(int i = 3; i< m.getColumnCount()-1; i++){
            
                double[] values = new double[rowCount];
                
                try {
                    
                    for(int j = 0; j < rowCount; j++){
                        
                        values[j] = Double.parseDouble(
                                (String) m.getValueAt(j, i) );

                    }            
                    average[i] = "<html><b>"+mean.evaluate(values)+"</b></html>";
                    stdDev[i] = "<html><b>"+std.evaluate(values)+"</b></html>";
                    min[i] = "<html><b>"+minD.evaluate(values)+"</b></html>";
                    max[i] = "<html><b>"+maxD.evaluate(values)+"</b></html>";
                    median[i] = "<html><b>"+medD.evaluate(values)+"</b></html>";
                
                } catch (Exception e) {
                    
                }
            
            }
            
            m.addRow(average);
            m.addRow(stdDev);
            m.addRow(min);
            m.addRow(max);
            m.addRow(median);
        
        }
        

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        jButton1ActionPerformed(null);
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    public void printPercentage(double percentage){
    
        jTextAreaOutput.append(        
                String.format("Done %f%%\n", percentage)        
        );
        jTextAreaOutput.setCaretPosition(jTextAreaOutput.getDocument().getLength());
    
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem OpenFile;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JCheckBox jCheckBoxDeepAnalysis;
    private javax.swing.JCheckBox jCheckBoxSimilaritySorter;
    private javax.swing.JCheckBox jCheckBoxSingleDistance;
    private javax.swing.JCheckBox jCheckBoxTotals;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelElapsed;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jStartedTime;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableResults;
    private javax.swing.JTextArea jTextAreaOutput;
    private javax.swing.JComboBox runList;
    // End of variables declaration//GEN-END:variables

    void endSearch() {
   
        jTextAreaOutput.append("End\n");
        isWorking = false;
        jButtonStart.setEnabled(true);
        elapsed = new Date().getTime() - elapsed;
        
        long second = (elapsed / 1000) % 60;
        long minute = (elapsed / (1000 * 60)) % 60;
        long hour = (elapsed / (1000 * 60 * 60)) % 24;

        String time = String.format("%02d:%02d:%02d:%d", hour, minute, second, elapsed);
        jLabelElapsed.setText(time);
        jTextAreaOutput.setCaretPosition(jTextAreaOutput.getDocument().getLength());
    }
}
